{"ast":null,"code":"import { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { API } from 'src/app/core/services/ip.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"src/app/core/services/generic.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"ngx-pagination\";\nfunction UpdateLeadComponent_tr_14_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r3 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"tr\", 11)(1, \"td\", 12);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\", 12);\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(5, \"td\", 13)(6, \"input\", 14);\n    i0.ɵɵlistener(\"change\", function UpdateLeadComponent_tr_14_Template_input_change_6_listener() {\n      const restoredCtx = i0.ɵɵrestoreView(_r3);\n      const item_r1 = restoredCtx.$implicit;\n      const ctx_r2 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r2.changeList(item_r1.lead_id));\n    });\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", item_r1.lead_id, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", item_r1.source, \" \");\n    i0.ɵɵadvance(2);\n    i0.ɵɵproperty(\"value\", item_r1.lead_id);\n  }\n}\nconst _c0 = function (a1) {\n  return {\n    itemsPerPage: 10,\n    currentPage: a1\n  };\n};\nexport class UpdateLeadComponent {\n  constructor(dialogRef, data, genericService) {\n    this.dialogRef = dialogRef;\n    this.data = data;\n    this.genericService = genericService;\n    this.show = 5; // Use this value to control how many items will be appear per Selecton Criteria and Operations\n    this.items = [];\n    this.page = 1;\n    this.newDuplicateList = [];\n  }\n  ngOnInit() {\n    this.getLead(this.data.lead.lead_id);\n  }\n  getLead(leadId) {\n    this.genericService.getMethod(API(leadId).getLeadById).subscribe(res => {\n      res.forEach(element => {\n        this.data.list.filter(item => item.lead_id == element).forEach(item => {\n          this.items.push(item);\n        });\n      });\n    });\n  }\n  submit() {\n    let body = {};\n    this.genericService.putMethod(API(this.data.lead.lead_id).updateLead, this.items).subscribe(res => {\n      this.dialogRef.close(true);\n      console.log(res);\n    });\n  }\n  changeList(lead) {\n    if (lead.checked) {\n      this.newDuplicateList.push(lead);\n    } else {\n      let index = this.newDuplicateList.findIndex(i => i === lead);\n      if (index !== -1) {\n        this.newDuplicateList.splice(index, 1);\n      }\n    }\n  }\n  static #_ = this.ɵfac = function UpdateLeadComponent_Factory(t) {\n    return new (t || UpdateLeadComponent)(i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i2.GenericService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: UpdateLeadComponent,\n    selectors: [[\"app-update-lead\"]],\n    decls: 21,\n    vars: 6,\n    consts: [[\"mat-dialog-title\", \"\"], [1, \"mat-typography\"], [1, \"container\"], [1, \"w-full\", \"sm:bg-white\", \"rounded-lg\", \"overflow-hidden\", \"sm:shadow-lg\", \"my-5\"], [1, \"text-white\"], [1, \"bg-gray-400\", \"flex\", \"flex-no\", \"wrap\", \"sm:table-row\", \"rounded-l-lg\", \"sm:rounded-none\", \"mb-2\", \"sm:mb-0\"], [1, \"p-3\", \"text-center\"], [1, \"flex-1\", \"sm:flex-none\"], [\"class\", \"flex flex-col flex-no wrap sm:table-row mb-2 sm:mb-0\", 4, \"ngFor\", \"ngForOf\"], [\"mat-button\", \"\", \"mat-dialog-close\", \"\", 1, \"bg-red-400\", \"hover:bg-rose-600\", \"rounded-md\", \"text-white\", \"p-2\", \"mr-2\"], [\"mat-button\", \"\", 1, \"bg-blue-400\", \"hover:bg-blue-600\", \"rounded-md\", \"text-white\", \"p-2\", 3, \"click\"], [1, \"flex\", \"flex-col\", \"flex-no\", \"wrap\", \"sm:table-row\", \"mb-2\", \"sm:mb-0\"], [1, \"border-grey-light\", \"border\", \"hover:bg-gray-100\", \"p-3\"], [1, \"border-grey-light\", \"border\", \"hover:bg-gray-100\", \"p-3\", \"truncate\", \"text-center\"], [\"id\", \"checked-checkbox\", \"type\", \"checkbox\", 1, \"w-4\", \"h-4\", \"text-blue-600\", \"bg-gray-100\", \"border-gray-300\", \"rounded\", \"focus:ring-blue-500\", \"dark:focus:ring-blue-600\", \"dark:ring-offset-gray-800\", \"focus:ring-2\", \"dark:bg-gray-700\", \"dark:border-gray-600\", 3, \"value\", \"change\"]],\n    template: function UpdateLeadComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h2\", 0);\n        i0.ɵɵtext(1, \"List of Potential Duplicate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"mat-dialog-content\", 1)(3, \"div\", 2)(4, \"table\", 3)(5, \"thead\", 4)(6, \"tr\", 5)(7, \"th\", 6);\n        i0.ɵɵtext(8, \"Lead Id\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"th\", 6);\n        i0.ɵɵtext(10, \"Source\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(11, \"th\", 6);\n        i0.ɵɵtext(12, \"Actions\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(13, \"tbody\", 7);\n        i0.ɵɵtemplate(14, UpdateLeadComponent_tr_14_Template, 7, 3, \"tr\", 8);\n        i0.ɵɵpipe(15, \"paginate\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(16, \"mat-dialog-actions\")(17, \"button\", 9);\n        i0.ɵɵtext(18, \"Cancel\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"button\", 10);\n        i0.ɵɵlistener(\"click\", function UpdateLeadComponent_Template_button_click_19_listener() {\n          return ctx.submit();\n        });\n        i0.ɵɵtext(20, \"Update\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(14);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind2(15, 1, ctx.items, i0.ɵɵpureFunction1(4, _c0, ctx.page)));\n      }\n    },\n    dependencies: [i3.NgForOf, i1.MatDialogClose, i1.MatDialogTitle, i1.MatDialogContent, i1.MatDialogActions, i4.PaginatePipe],\n    styles: [\".mat-mdc-dialog-actions[_ngcontent-%COMP%] {\\n  justify-content: flex-end;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvdmlldy9QYWdlcy9saXN0LWxlYWQvdXBkYXRlLWxlYWQvdXBkYXRlLWxlYWQuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSx5QkFBQTtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLm1hdC1tZGMtZGlhbG9nLWFjdGlvbnMge1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"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","names":["MAT_DIALOG_DATA","API","i0","UpdateLeadComponent","constructor","dialogRef","data","genericService","ngOnInit","getLead","lead","lead_id","leadId","getMethod","getLeadById","subscribe","res","forEach","element","list","filter","item","items","push","submit","body","putMethod","updateLead","close","console","log","changeList","checked","newDuplicateList","index","findIndex","i","splice","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/home/mohamedelsayed/Personal/angular/angular-interview-task/src/app/view/Pages/list-lead/update-lead/update-lead.component.ts","/home/mohamedelsayed/Personal/angular/angular-interview-task/src/app/view/Pages/list-lead/update-lead/update-lead.component.html"],"sourcesContent":["import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogData } from '../list-lead.component';\nimport { GenericService } from 'src/app/core/services/generic.service';\nimport { API } from 'src/app/core/services/ip.service';\n\n@Component({\n  selector: 'app-update-lead',\n  templateUrl: './update-lead.component.html',\n  styleUrls: ['./update-lead.component.scss']\n})\nexport class UpdateLeadComponent {\n  show: number = 5; // Use this value to control how many items will be appear per Selecton Criteria and Operations\n  items: any = [];\n  page: number = 1;\n  newDuplicateList: any = [];\n\n  constructor(public dialogRef: MatDialogRef<UpdateLeadComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private genericService: GenericService) { }\n  ngOnInit() {\n    this.getLead(this.data.lead.lead_id);\n  }\n\n  getLead(leadId: string) {\n    this.genericService.getMethod(API(leadId).getLeadById).subscribe((res: any) => {\n      res.forEach((element: any) => {\n        this.data.list.filter(item => item.lead_id == element).forEach(item => {\n          this.items.push(item);\n        });\n      });\n    })\n  }\n\n  submit() {\n    let body = {\n\n    }\n    this.genericService.putMethod(API(this.data.lead.lead_id).updateLead, this.items).subscribe((res: any) => {\n      this.dialogRef.close(true);\n      console.log(res);\n    })\n  }\n\n  changeList(lead: any) {\n    if (lead.checked) {\n      this.newDuplicateList.push(lead);\n    } else {\n      let index = this.newDuplicateList.findIndex(i => i === lead);\n      if (index !== -1) {\n        this.newDuplicateList.splice(index, 1);\n      }\n    }\n  }\n}\n","<h2 mat-dialog-title>List of Potential Duplicate</h2>\n<mat-dialog-content class=\"mat-typography\">\n    <div class=\"container\">\n        <table\n        class=\"w-full  sm:bg-white rounded-lg overflow-hidden sm:shadow-lg my-5\"\n      >\n        <thead class=\"text-white\">\n          <tr\n           class=\"bg-gray-400 flex flex-no wrap sm:table-row rounded-l-lg sm:rounded-none mb-2 sm:mb-0\"\n          >\n            <th class=\"p-3 text-center\">Lead Id</th>\n            <th class=\"p-3 text-center\">Source</th>\n            <th class=\"p-3 text-center\">Actions</th>\n          </tr>\n        </thead>\n        <tbody class=\"flex-1 sm:flex-none\">\n          <tr\n            class=\"flex flex-col flex-no wrap sm:table-row mb-2 sm:mb-0\"\n            *ngFor=\"let item of items | paginate : { itemsPerPage: 10, currentPage: page }\"\n          >\n            <td class=\"border-grey-light border hover:bg-gray-100 p-3 \">\n              {{ item.lead_id }}\n            </td>\n            <td class=\"border-grey-light border hover:bg-gray-100 p-3 \">\n                {{ item.source }}\n              </td>\n            <td class=\"border-grey-light border hover:bg-gray-100 p-3 truncate text-center\">\n                <input id=\"checked-checkbox\" type=\"checkbox\" (change)=\"changeList(item.lead_id)\" [value]=\"item.lead_id\" class=\"w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600\">\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close class=\"bg-red-400 hover:bg-rose-600 rounded-md text-white p-2 mr-2\">Cancel</button>\n  <button mat-button class=\"bg-blue-400 hover:bg-blue-600 rounded-md text-white p-2\" (click)=\"submit()\">Update</button>\n</mat-dialog-actions>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}