{"ast":null,"code":"import { MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { API } from 'src/app/core/services/ip.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/material/dialog\";\nimport * as i2 from \"src/app/core/services/generic.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"ngx-pagination\";\nfunction UpdateLeadComponent_tr_12_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 12)(1, \"td\", 13);\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\", 14);\n    i0.ɵɵelement(4, \"input\", 15);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const item_r1 = ctx.$implicit;\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate1(\" \", item_r1, \" \");\n  }\n}\nconst _c0 = function (a1) {\n  return {\n    itemsPerPage: 10,\n    currentPage: a1\n  };\n};\nexport class UpdateLeadComponent {\n  constructor(dialogRef, data, genericService) {\n    this.dialogRef = dialogRef;\n    this.data = data;\n    this.genericService = genericService;\n    this.show = 5; // Use this value to control how many items will be appear per Selecton Criteria and Operations\n    this.items = [];\n    this.page = 1;\n  }\n  ngOnInit() {\n    this.getLead(this.data.id);\n  }\n  getLead(leadId) {\n    this.genericService.getMethod(API(leadId).getLeadById).subscribe(res => {\n      this.items = res;\n    });\n  }\n  submit() {\n    this.genericService.putMethod(API(this.data.id).updateLead, this.items).subscribe(res => {});\n  }\n  static #_ = this.ɵfac = function UpdateLeadComponent_Factory(t) {\n    return new (t || UpdateLeadComponent)(i0.ɵɵdirectiveInject(i1.MatDialogRef), i0.ɵɵdirectiveInject(MAT_DIALOG_DATA), i0.ɵɵdirectiveInject(i2.GenericService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: UpdateLeadComponent,\n    selectors: [[\"app-update-lead\"]],\n    decls: 19,\n    vars: 6,\n    consts: [[\"mat-dialog-title\", \"\"], [1, \"mat-typography\"], [1, \"container\"], [1, \"w-full\", \"sm:bg-white\", \"rounded-lg\", \"overflow-hidden\", \"sm:shadow-lg\", \"my-5\"], [1, \"text-white\"], [1, \"bg-gray-400\", \"flex\", \"flex-col\", \"flex-no\", \"wrap\", \"sm:table-row\", \"rounded-l-lg\", \"sm:rounded-none\", \"mb-2\", \"sm:mb-0\"], [1, \"p-3\", \"text-left\", \"w-[90%]\"], [1, \"p-3\", \"text-left\"], [1, \"flex-1\", \"sm:flex-none\"], [\"class\", \"flex flex-col flex-no wrap sm:table-row mb-2 sm:mb-0\", 4, \"ngFor\", \"ngForOf\"], [\"mat-button\", \"\", \"mat-dialog-close\", \"\", 1, \"bg-red-400\", \"hover:bg-rose-600\", \"rounded-md\", \"text-white\", \"p-2\", \"mr-2\"], [\"mat-button\", \"\", 1, \"bg-blue-400\", \"hover:bg-blue-600\", \"rounded-md\", \"text-white\", \"p-2\", 3, \"click\"], [1, \"flex\", \"flex-col\", \"flex-no\", \"wrap\", \"sm:table-row\", \"mb-2\", \"sm:mb-0\"], [1, \"border-grey-light\", \"border\", \"hover:bg-gray-100\", \"p-3\"], [1, \"border-grey-light\", \"border\", \"hover:bg-gray-100\", \"p-3\", \"truncate\"], [\"id\", \"checked-checkbox\", \"type\", \"checkbox\", \"value\", \"\", 1, \"w-4\", \"h-4\", \"text-blue-600\", \"bg-gray-100\", \"border-gray-300\", \"rounded\", \"focus:ring-blue-500\", \"dark:focus:ring-blue-600\", \"dark:ring-offset-gray-800\", \"focus:ring-2\", \"dark:bg-gray-700\", \"dark:border-gray-600\"]],\n    template: function UpdateLeadComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h2\", 0);\n        i0.ɵɵtext(1, \"List of Potential Duplicate\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"mat-dialog-content\", 1)(3, \"div\", 2)(4, \"table\", 3)(5, \"thead\", 4)(6, \"tr\", 5)(7, \"th\", 6);\n        i0.ɵɵtext(8, \"Lead Id\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(9, \"th\", 7);\n        i0.ɵɵtext(10, \"Actions\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(11, \"tbody\", 8);\n        i0.ɵɵtemplate(12, UpdateLeadComponent_tr_12_Template, 5, 1, \"tr\", 9);\n        i0.ɵɵpipe(13, \"paginate\");\n        i0.ɵɵelementEnd()()()();\n        i0.ɵɵelementStart(14, \"mat-dialog-actions\")(15, \"button\", 10);\n        i0.ɵɵtext(16, \"Cancel\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(17, \"button\", 11);\n        i0.ɵɵlistener(\"click\", function UpdateLeadComponent_Template_button_click_17_listener() {\n          return ctx.submit();\n        });\n        i0.ɵɵtext(18, \"Update\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(12);\n        i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind2(13, 1, ctx.items, i0.ɵɵpureFunction1(4, _c0, ctx.page)));\n      }\n    },\n    dependencies: [i3.NgForOf, i1.MatDialogClose, i1.MatDialogTitle, i1.MatDialogContent, i1.MatDialogActions, i4.PaginatePipe],\n    styles: [\"thead[_ngcontent-%COMP%]   tr[_ngcontent-%COMP%] {\\n  display: block;\\n}\\n\\n.mat-mdc-dialog-actions[_ngcontent-%COMP%] {\\n  justify-content: flex-end;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvdmlldy9QYWdlcy9saXN0LWxlYWQvdXBkYXRlLWxlYWQvdXBkYXRlLWxlYWQuY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDSSxjQUFBO0FBQ0o7O0FBRUU7RUFDRSx5QkFBQTtBQUNKIiwic291cmNlc0NvbnRlbnQiOlsidGhlYWQgdHJ7XG4gICAgZGlzcGxheTogYmxvY2s7XG4gIH1cblxuICAubWF0LW1kYy1kaWFsb2ctYWN0aW9ucyB7XG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcbiAgfSJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n  });\n}","map":{"version":3,"mappings":"AACA,SAAuBA,eAAe,QAAQ,0BAA0B;AAGxE,SAASC,GAAG,QAAQ,kCAAkC;;;;;;;;ICW5CC,8BAGC;IAEGA,YACF;IAAAA,iBAAK;IACLA,8BAAoE;IAChEA,4BAAkP;IACtPA,iBAAK;;;;IAJHA,eACF;IADEA,wCACF;;;;;;;;;ADTZ,OAAM,MAAOC,mBAAmB;EAI9BC,YAAmBC,SAA4C,EAC7BC,IAAgB,EACxCC,cAA8B;IAFrB,cAAS,GAATF,SAAS;IACM,SAAI,GAAJC,IAAI;IAC5B,mBAAc,GAAdC,cAAc;IALxB,SAAI,GAAW,CAAC,CAAC,CAAC;IAClB,UAAK,GAAQ,EAAE;IACf,SAAI,GAAW,CAAC;EAG4B;EAC5CC,QAAQ;IACN,IAAI,CAACC,OAAO,CAAC,IAAI,CAACH,IAAI,CAACI,EAAE,CAAC;EAC5B;EAEAD,OAAO,CAACE,MAAc;IACpB,IAAI,CAACJ,cAAc,CAACK,SAAS,CAACX,GAAG,CAACU,MAAM,CAAC,CAACE,WAAW,CAAC,CAACC,SAAS,CAACC,GAAG,IAAG;MACrE,IAAI,CAACC,KAAK,GAAGD,GAAG;IAClB,CAAC,CAAC;EAEJ;EAEAE,MAAM;IACJ,IAAI,CAACV,cAAc,CAACW,SAAS,CAACjB,GAAG,CAAC,IAAI,CAACK,IAAI,CAACI,EAAE,CAAC,CAACS,UAAU,EAAE,IAAI,CAACH,KAAK,CAAC,CAACF,SAAS,CAACC,GAAG,IAAG,CAAG,CAAC,CAAC;EAC/F;EAAC;qBApBUZ,mBAAmB,8DAKpBH,eAAe;EAAA;EAAA;UALdG,mBAAmB;IAAAiB;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QCZhCtB,6BAAqB;QAAAA,2CAA2B;QAAAA,iBAAK;QACrDA,6CAA2C;QASGA,uBAAO;QAAAA,iBAAK;QAC9CA,6BAA0B;QAAAA,wBAAO;QAAAA,iBAAK;QAG1CA,iCAAmC;QACjCA,oEAUK;;QACPA,iBAAQ;QAIhBA,2CAAoB;QACsFA,uBAAM;QAAAA,iBAAS;QACvHA,mCAAsG;QAAnBA;UAAA,OAASuB,YAAQ;QAAA,EAAC;QAACvB,uBAAM;QAAAA,iBAAS;;;QAf1FA,gBAA6D;QAA7DA,gGAA6D","names":["MAT_DIALOG_DATA","API","i0","UpdateLeadComponent","constructor","dialogRef","data","genericService","ngOnInit","getLead","id","leadId","getMethod","getLeadById","subscribe","res","items","submit","putMethod","updateLead","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/home/mohamedelsayed/Personal/angular/angular-interview-task/src/app/view/Pages/list-lead/update-lead/update-lead.component.ts","/home/mohamedelsayed/Personal/angular/angular-interview-task/src/app/view/Pages/list-lead/update-lead/update-lead.component.html"],"sourcesContent":["import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material/dialog';\nimport { DialogData } from '../list-lead.component';\nimport { GenericService } from 'src/app/core/services/generic.service';\nimport { API } from 'src/app/core/services/ip.service';\nimport { Lead } from 'src/app/core/Interfaces/lead';\n\n@Component({\n  selector: 'app-update-lead',\n  templateUrl: './update-lead.component.html',\n  styleUrls: ['./update-lead.component.scss']\n})\nexport class UpdateLeadComponent {\n  show: number = 5; // Use this value to control how many items will be appear per Selecton Criteria and Operations\n  items: any = [];\n  page: number = 1;\n  constructor(public dialogRef: MatDialogRef<UpdateLeadComponent>,\n    @Inject(MAT_DIALOG_DATA) public data: DialogData,\n    private genericService: GenericService) { }\n  ngOnInit() {\n    this.getLead(this.data.id);\n  }\n\n  getLead(leadId: string) {\n    this.genericService.getMethod(API(leadId).getLeadById).subscribe(res => {\n      this.items = res;\n    });\n\n  }\n\n  submit() {\n    this.genericService.putMethod(API(this.data.id).updateLead, this.items).subscribe(res => { });\n  }\n}\n","<h2 mat-dialog-title>List of Potential Duplicate</h2>\n<mat-dialog-content class=\"mat-typography\">\n    <div class=\"container\">\n        <table\n        class=\"w-full  sm:bg-white rounded-lg overflow-hidden sm:shadow-lg my-5\"\n      >\n        <thead class=\"text-white\">\n          <tr\n           class=\"bg-gray-400 flex flex-col flex-no wrap sm:table-row rounded-l-lg sm:rounded-none mb-2 sm:mb-0\"\n          >\n            <th class=\"p-3 text-left w-[90%]\">Lead Id</th>\n            <th class=\"p-3 text-left\">Actions</th>\n          </tr>\n        </thead>\n        <tbody class=\"flex-1 sm:flex-none\">\n          <tr\n            class=\"flex flex-col flex-no wrap sm:table-row mb-2 sm:mb-0\"\n            *ngFor=\"let item of items | paginate : { itemsPerPage: 10, currentPage: page }\"\n          >\n            <td class=\"border-grey-light border hover:bg-gray-100 p-3 \">\n              {{ item }}\n            </td>\n            <td class=\"border-grey-light border hover:bg-gray-100 p-3 truncate\">\n                <input id=\"checked-checkbox\" type=\"checkbox\" value=\"\" class=\"w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600\">\n            </td>\n          </tr>\n        </tbody>\n      </table>\n    </div>\n</mat-dialog-content>\n<mat-dialog-actions>\n  <button mat-button mat-dialog-close class=\"bg-red-400 hover:bg-rose-600 rounded-md text-white p-2 mr-2\">Cancel</button>\n  <button mat-button class=\"bg-blue-400 hover:bg-blue-600 rounded-md text-white p-2\" (click)=\"submit()\">Update</button>\n</mat-dialog-actions>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}